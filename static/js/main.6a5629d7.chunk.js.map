{"version":3,"sources":["logo.svg","components/leftPanel.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Leftpanel","props","useState","selectedYear","selectedLaunch","selectedLand","stateparams","setStateparams","useEffect","console","log","JSON","stringify","getUrl","handleYearClick","event","target","innerText","stateCopy","Object","assign","handleLaunchClick","handleLandingClick","Fragment","className","map","year","onClick","value","Main","state","setState","fetch","url","then","response","json","data","item","src","links","mission_patch_small","width","height","mission_name","flight_number","mission_id","launch_year","launch_success","App","durl","setUrl","successfulLaunch","succesfulLanding","queryParam","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6a5629d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\r\n\r\n\r\n\r\n\r\nfunction Leftpanel(props) {\r\n    \r\n    const [stateparams, setStateparams] = useState({\r\n        selectedYear:'', selectedLaunch:'',selectedLand:''\r\n    });\r\n\r\n    useEffect(() => {\r\n         console.log(' stateobj   '+  JSON.stringify(stateparams)) ;\r\n        props.getUrl(stateparams.selectedYear, stateparams.selectedLaunch, stateparams.selectedLand );\r\n   },[stateparams.selectedYear, stateparams.selectedLaunch, stateparams.selectedLand])\r\n\r\n    \r\n\r\n    \r\n\r\n     const handleYearClick = event => {\r\n          console.log('selectedYear *   '+event.target.innerText );\r\n          var stateCopy = Object.assign({},stateparams);\r\n          stateCopy.selectedYear = event.target.innerText;\r\n          console.log('stateCopy' + JSON.stringify(stateCopy));\r\n          setStateparams(stateCopy);\r\n        \r\n         \r\n     }\r\n\r\n     \r\n\r\n     const handleLaunchClick = event =>{\r\n          console.log('selectedLaunch *   '+event.target.innerText);\r\n          var stateCopy = Object.assign({},stateparams);\r\n          stateCopy.selectedLaunch = event.target.innerText;\r\n          setStateparams(stateCopy);\r\n       \r\n     }\r\n\r\n     const handleLandingClick = event =>{\r\n          console.log('selectedLand *   '+event.target.innerText);\r\n          var stateCopy = Object.assign({},stateparams);\r\n          stateCopy.selectedLand = event.target.innerText;\r\n          setStateparams(stateCopy);\r\n     }\r\n    \r\n  \r\n\r\n    return(\r\n        <React.Fragment>\r\n        <h4 className=\"filter\">Filters</h4>\r\n        <p>Launch Year</p>\r\n        <hr />\r\n        {\r\n            [2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020].map(year => <button className={stateparams.selectedYear == year ? \"bttn selected\": \"bttn\"} onClick={handleYearClick}>{year}</button>)\r\n        }\r\n        <h4>Successful Launch</h4>\r\n        <hr />\r\n        {\r\n            ['true', 'false'].map(value => <button onClick={handleLaunchClick}  className={stateparams.selectedLaunch == value ? \"val1 selected\": \"val1\"} >{value}</button>)\r\n        }\r\n        <h4>Successful Landing</h4>\r\n        {\r\n            ['true', 'false'].map(value => <button onClick={handleLandingClick} className={stateparams.selectedLand == value ? \"val2 selected\": \"val2\"} >{value}</button>)\r\n        }\r\n       \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Leftpanel;","import React, {useState, useEffect} from 'react';\r\nimport '../App.css';\r\n\r\n\r\nfunction Main(props){\r\n  const [state, setState] = useState([]);\r\n  useEffect(() => {\r\n    fetch(props.url)\r\n    .then(response => response.json())\r\n    .then(data =>{\r\n      setState(data)\r\n    })\r\n   },[props.url]);\r\n console.log('url in main ' + props.url);\r\n\r\n  return (\r\n    \r\n    <React.Fragment>\r\n    {state.map(item =>\r\n    <div className=\"col\">\r\n    <img className=\"img\" src={item.links.mission_patch_small} width=\"180\" height=\"210\" />\r\n    <h4>{item.mission_name} #{item.flight_number}</h4>\r\n    <h4>Mission Id: {item.mission_id}</h4>\r\n    <h4>Lauch Year: {item.launch_year}</h4>\r\n    <h4>Launch Success:{item.launch_success}</h4>\r\n    </div>\r\n    )}\r\n   </React.Fragment>\r\n    \r\n  )\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Leftpanel from './components/leftPanel';\nimport Main from './components/main';\n// import GetFinalUrl './config';\nimport {useState} from 'react';\n\nfunction App() {\n  \nvar durl = 'https://api.spaceXdata.com/v3/launches?limit=20&';\n\nvar [url, setUrl] = useState(durl);\n\n\n    function getUrl(selectedYear,successfulLaunch,succesfulLanding ){\n\n      var queryParam = '';\n      if(selectedYear!=null){\n          queryParam+='launch_year='+selectedYear + '&';\n      }\n       if(successfulLaunch!=null){\n          queryParam+='launch_success='+successfulLaunch + '&';\n      }\n       if(succesfulLanding!=null){\n          queryParam+='land_success='+succesfulLanding + '&';\n      }\n      url = durl  + queryParam;\n      setUrl(url);\n      console.log('inside getUrl ' + url);\n      return url;\n   }\n  return ( \n    <div className=\"container\">\n    <div>\n    <h2>SpacEx Launch programs</h2>\n    </div>\n    <div className=\"column1\"> \n    < Leftpanel  getUrl={getUrl}  />\n    </div>\n    <div className=\"column2\">\n    < Main url={url}/>\n    </div>\n    </div>\n  );\n}\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}